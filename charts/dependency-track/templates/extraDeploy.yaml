{{- /*
This template is part of a Helm chart for deploying additional Kubernetes resources that are not
included in the main chart package. It is designed to extend the capabilities of the chart by
allowing users to specify custom Kubernetes resources.

                        ❗ USE THIS TEMPLATE SPARINGLY AND ONLY WHEN NECESSARY ❗

It is intended for use only when the Helm chart does not provide a way to configure the desired resource natively.

How it works:
- The template iterates over each item in `$.Values.extraDeploy` which is a list representing extra
  Kubernetes resources.
- Each resource (item of the list) is passed through the `dependencytrack.tpl.render` template.
- The resultant YAML is parsed to ensure that it is valid. If not, the template fails with an error containing the
  root cause of the error (i.e. the original YAML that failed to parse with line numbers for easier debugging).
- If all checks pass, the item is rendered as YAML multi-document and printed to the output (passed to the Helm engine).

Usage Notes:
- Ensure that `$.Values.extraDeploy` is properly formatted as

  a) A list of dictionaries. Each dictionary represents a Kubernetes resource.
  b) A list of multiline strings (using `|-`). Each multiline string should be properly indented and will be converted to
     the dictionary automatically. (This is useful and preferred option if templating is required and due to complexity,
     it is not possible to use a) above. Also, using string instead of dictionary allows better debugging of the errors
     in the template, because an error in the dictionary configured according to variant a) causes Helm to fail with a generic
     error message and mostly without indication of the root cause.)

  See examples below. Note that the indentation is important!

- Each item of the `$.Values.extraDeploy` should represent a valid Kubernetes resource.
- Each item can contain templating. (See examples below.) ⚠ IMPORTANT: Dictinary keys are not templated, only values are! If
  you need to template the keys, or if you need to use a complex template, use option b) above.

Examples of a valid `$.Values.extraDeploy` structure:

Option a) combined with b):

  extraDeploy:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: {{ .Release.Name }}-config
        namespace: {{ .Release.Namespace }}
      data:
        key: value
    - |-
      apiVersion: v1
      kind: Secret
      metadata:
        name: {{ .Release.Name }}-secret
        namespace: {{ .Release.Namespace }}
      stringData:
        username: user
        password: pass
    - |-
      {{- if all (.Capabilities.APIVersions.Has "route.openshift.io/v1") (.Values.ingress.enabled | include "?IS#True") -}}
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: {{ .Release.Name }}-route
        namespace: {{ .Release.Namespace }}
      spec:
        host: {{ .Values.ingress.hostname }}
        path: /
        to:
          kind: Service
          name: example-service
        port:
          targetPort: 8080
      {{- end -}}
*/ -}}

{{- /* ============ ! DON'T EDIT AFTER THIS LINE ! ============ */ -}}

{{- /* Initialize the resultList */ -}}
{{- $resultList := (list) -}}

{{- /* Iterate over each value in the $.Values.extraDeploy */ -}}
{{- range $i, $value := $.Values.extraDeploy }}
  {{- /* Initialize the result */ -}}
  {{- $result := "" -}}

  {{- /* Check, if $source is NOT empty */ -}}
  {{- if $value | empty | not -}}
    {{- /* Render the input value as a template (convert dictionary to string if needed) */ -}}
    {{- $manifest := ($source := include "!TPL" (dict "ROOT" $ "VALUE" $value)) | fromYaml -}}

    {{- /* Check, if the $manifest has key "Error" (means that the input $value after rendering is not valid YAML) */ -}}
    {{- if hasKey $manifest "Error" -}}
      {{- printf "$.Values.extraDeploy[%d]: Invalid YAML:\n\n%s\n" $i $source | fail -}}
    {{- end -}}

    {{- if any ($manifest.metadata.name | empty) ($manifest.kind | empty) ($manifest.apiVersion | empty) -}}
      {{- printf "$.Values.extraDeploy[%d]: apiVersion, kind and metadata.name are required:\n\n%s\n" $i $source | fail -}}
    {{- end -}}

    {{- /* Add the Kind and Name of the $manifest for easier identification */ -}}
    {{- $result = printf "%s# KIND: %s\n" $result $manifest.kind -}}
    {{- $result = printf "%s# NAME: %s\n" $result $manifest.metadata.name -}}
    {{- /* Add the reference to $.Values.extraDeploy for easier debugging (in case of error) */ -}}
    {{- $result = printf "%s# ORIGIN: $.Values.extraDeploy[%d]\n" $result $i -}}

    {{- /* Append the $manifest to the $result */ -}}
    {{- $result = print $result ($manifest | toYaml) -}}
    {{- /* Add the final $result to the $resultList */ -}}
    {{- $resultList = append $resultList $result -}}
  {{- end -}}
{{- end -}}

{{- /* If the resultList is not empty, ... */ -}}
{{- if $resultList | empty | not -}}
  {{- /* ... render the result list as it's items separated by "---" */ -}}
  {{- $resultList | compact | join "\n---\n" -}}
{{- end -}}
