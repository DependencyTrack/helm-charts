---
common:
  nameOverride: ""
  fullnameOverride: ""
  image:
    registry: docker.io
    pullSecrets: []
  secretKey:
    # -- Whether the chart should generate a secret key upon deployment.
    createSecret: false
    # -- Use the secret key defined in an existing secret.
    existingSecretName: ""
  serviceAccount:
    # -- Whether the chart should generate a serviceAccount
    create: true
    annotations: {}
    # -- Use the name of the name of the release by default, or specify a custom name.
    name: ""
    # -- Whether the serviceAccount should mount the token.
    automount: false

apiServer:
  annotations: {}
  image:
    # -- Override common.image.registry for the API server.
    registry: ''
    repository: dependencytrack/apiserver
    tag: ~
    pullPolicy: IfNotPresent
  command: []
  args: []
  resources:
    requests:
      cpu: "2"
      memory: 5Gi
    limits:
      cpu: "4"
      memory: 5Gi
  persistentVolume:
    enabled: false
    className: ""
    size: 5Gi
  extraEnv: []
    # - name: "ALPINE_DATABASE_PASSWORD"
    #   valueFrom:
    #     secretKeyRef:
    #       key: db-password
    #       name: dependencytrack-secrets
    # - name: ALPINE_DATABASE_MODE
    #   value: "external"
  extraEnvFrom: []
  extraContainers: []
  tolerations: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  additionalVolumeMounts: []
  #   - name: foo
  #     mountPath: /bar
  additionalVolumes:
    []
    # - name: foo
    #   emptyDir: {}
  service:
    type: ClusterIP
    nodePort: ~
    annotations: {}
  serviceMonitor:
    enabled: false
    namespace: monitoring
    scrapeInternal: 15s
    scrapeTimeout: 30s
  initContainers: []
  nodeSelector: {}
  # Use the following to fix permissions on the /data volume.
  # initContainers:
  #   - name: fix-permissions
  #     image: docker.io/library/busybox
  #     command:
  #       - sh
  #       - -c
  #       - |
  #         chown -R 1000:1000 /data
  #     volumeMounts:
  #       - name: data
  #         mountPath: /data
  #     securityContext:
  #       capabilities:
  #         add:
  #         - CHOWN
  #       runAsNonRoot: false
  #       runAsUser: 0
  #       seccompProfile:
  #         type: RuntimeDefault

frontend:
  replicaCount: 1
  annotations: {}
  image:
    # -- Override common.image.registry for the frontend.
    registry: ''
    repository: dependencytrack/frontend
    tag: ~
    pullPolicy: IfNotPresent
  command: []
  args: []
  resources:
    requests:
      cpu: 150m
      memory: 64Mi
    limits:
      cpu: 500m
      memory: 128Mi
  extraEnv: []
  extraEnvFrom: []
  extraContainers: []
  tolerations: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  additionalVolumeMounts:
    []
    # - name: foo
    #   mountPath: /bar
  additionalVolumes:
    []
    # - name: foo
    #   emptyDir: {}
  service:
    type: ClusterIP
    nodePort: ~
    annotations: {}
  apiBaseUrl: ""
  initContainers: []
  nodeSelector: {}

ingress:
  enabled: false
  annotations: {}
  hostname: "example.com"
  ingressClassName: ""
  tls: []
  #  - secretName: dt-tls
  #    hosts:
  #      - example.com

# -- Create extra manifests via values.
extraObjects:
  []
  # - apiVersion: "kubernetes-client.io/v1"
  #   kind: ExternalSecret
  #   metadata:
  #     name: tempo-secrets
  #   spec:
  #     backendType: aws
  #     data:
  #       - key: secret-access-key
  #         name: awssm-secret
