common:
  database:
    jdbcUrl: "jdbc:postgresql://postgres.{{ .Release.Namespace }}.svc.cluster.local:5432/dtrack"
    username: dtrack
    password: dtrack
  kafka:
    bootstrapServers: "redpanda.{{ .Release.Namespace }}.svc.cluster.local:9092"
  secretKey:
    createSecret: true

apiServer:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 512Mi

mirrorService:
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: "2"
      memory: 256Mi

repoMetaAnalyzer:
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: "2"
      memory: 256Mi

vulnAnalyzer:
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: "2"
      memory: 256Mi

extraObjects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: postgres
    namespace: "{{ .Release.Namespace }}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/name: "{{ printf \"%s-postgres\" (include \"hyades.name\" .) }}"
        app.kubernetes.io/component: postgres
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: "{{ .Release.Name }}"
          app.kubernetes.io/name: "{{ printf \"%s-postgres\" (include \"hyades.name\" .) }}"
          app.kubernetes.io/component: postgres
      spec:
        containers:
        - name: postgres
          image: postgres:16-alpine
          env:
          - name: POSTGRES_DB
            value: dtrack
          - name: POSTGRES_USER
            value: dtrack
          - name: POSTGRES_PASSWORD
            value: dtrack
          ports:
          - name: postgres
            containerPort: 5432
            protocol: TCP
- apiVersion: v1
  kind: Service
  metadata:
    name: postgres
    namespace: "{{ .Release.Namespace }}"
    labels:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/name: "{{ printf \"%s-postgres\" (include \"hyades.name\" .) }}"
      app.kubernetes.io/component: postgres
  spec:
    type: ClusterIP
    selector:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/name: "{{ printf \"%s-postgres\" (include \"hyades.name\" .) }}"
      app.kubernetes.io/component: postgres
    ports:
    - port: 5432
      targetPort: 5432
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: redpanda
    namespace: "{{ .Release.Namespace }}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/name: "{{ printf \"%s-redpanda\" (include \"hyades.name\" .) }}"
        app.kubernetes.io/component: redpanda
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: "{{ .Release.Name }}"
          app.kubernetes.io/name: "{{ printf \"%s-redpanda\" (include \"hyades.name\" .) }}"
          app.kubernetes.io/component: redpanda
      spec:
        containers:
        - name: redpanda
          image: docker.redpanda.com/vectorized/redpanda:v23.3.16
          args:
          - redpanda
          - start
          - --smp
          - '1'
          - --reserve-memory
          - 0M
          - --memory
          - 512M
          - --overprovisioned
          - --node-id
          - '0'
          - --kafka-addr
          - PLAINTEXT://0.0.0.0:9092
          - --advertise-kafka-addr
          - PLAINTEXT://redpanda.{{ .Release.Namespace }}.svc.cluster.local:9092
        ports:
        - name: kafka-api
          containerPort: 9092
          protocol: TCP
        - name: redpanda-admin
          containerPort: 9644
          protocol: TCP
- apiVersion: v1
  kind: Service
  metadata:
    name: redpanda
    namespace: "{{ .Release.Namespace }}"
    labels:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/name: "{{ printf \"%s-redpanda\" (include \"hyades.name\" .) }}"
      app.kubernetes.io/component: redpanda
  spec:
    type: ClusterIP
    selector:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/name: "{{ printf \"%s-redpanda\" (include \"hyades.name\" .) }}"
      app.kubernetes.io/component: redpanda
    ports:
    - name: kafka-api
      port: 9092
      targetPort: 9092
    - name: redpanda-admin
      port: 9644
      targetPort: 9644
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: redpanda-init-script
  data:
    create-topics.sh: |-
      #!/usr/bin/env bash

      set -euxo pipefail

      # Wait for Redpanda to become available
      rpk cluster health --watch --exit-when-healthy \
        --api-urls "$(echo "$REDPANDA_BROKERS" | sed -E 's/:[[:digit:]]+/:9644/g')"

      # Create required topics.
      # Note that this is exclusively to allow for the service pods to come up.
      # The topics are not created with recommended configs.
      # Do not use this for production deployments!
      rpk topic create 'dtrack.repo-meta-analysis.component'
      rpk topic create 'dtrack.repo-meta-analysis.result'
      rpk topic create 'dtrack.vuln-analysis.component'
      rpk topic create 'dtrack.vuln-analysis.scanner.result'
      rpk topic create 'dtrack.vuln-analysis.result'
      rpk topic create 'dtrack.vuln-analysis.result.processed'
      rpk topic create 'dtrack.vulnerability.mirror.command'
      rpk topic create 'dtrack.vulnerability.mirror.state' --topic-config 'cleanup.policy=compact'
      rpk topic create 'dtrack.vulnerability.digest' --topic-config 'cleanup.policy=compact'
      rpk topic create 'dtrack.vulnerability' --topic-config 'cleanup.policy=compact'
      rpk topic create 'dtrack.epss' --topic-config 'cleanup.policy=compact'
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: redpanda-init
    namespace: "{{ .Release.Namespace }}"
  spec:
    template:
      spec:
        containers:
        - name: redpanda
          image: docker.redpanda.com/vectorized/redpanda:v23.3.16
          command:
          - /bin/bash
          args:
          - /redpanda-init/create-topics.sh
          env:
          - name: REDPANDA_BROKERS
            value: "redpanda.{{ .Release.Namespace }}.svc.cluster.local:9092"
          volumeMounts:
          - name: init-script
            mountPath: "/redpanda-init"
        volumes:
        - name: init-script
          configMap:
            name: redpanda-init-script
            items:
            - key: create-topics.sh
              path: create-topics.sh
        restartPolicy: OnFailure
