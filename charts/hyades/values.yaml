---
common:
  nameOverride: ""
  fullnameOverride: ""
  image:
    registry: ghcr.io
    pullSecrets: []
  database:
    jdbcUrl: ""
    username: ""
    password: ""
  kafka:
    bootstrapServers: ""
    topicPrefix: ""
  secretKey:
    # -- Whether the chart should generate a secret key upon deployment.
    createSecret: false
    # -- Use the secret key defined in an existing secret.
    existingSecretName: ""
  serviceAccount:
    create: true
    annotations: {}
    # -- Use the name of the name of the release by default, or specify a custom name.
    name: ""
    # -- Whether the serviceAccount should mount the token.
    automount: false

apiServer:
  # -- Whether the API server shall be deployed.
  enabled: true
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use.
    strategy:
      type: RollingUpdate
  annotations: {}
  image: &apiServerImage
    # -- Override common.image.registry for the API server.
    registry: ""
    repository: dependencytrack/hyades-apiserver
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: "2"
      memory: 2Gi
    limits:
      cpu: "4"
      memory: 2Gi
  # -- Security context of the Container.
  securityContext: &hyadesSecurityContext
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    type: ClusterIP
    nodePort: ~
    port: 8080
    annotations: {}
  serviceMonitor:
    enabled: false
    namespace: monitoring
    scrapeInternal: 15s
    scrapeTimeout: 30s
  # -- Grace period for pod termination in seconds.
  # Should always be equal to or greater than the sum of `_DRAIN_TIMEOUT` configurations to ensure graceful shutdown.
  # Refer to https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/ for details.
  terminationGracePeriodSeconds: 60
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # Use the following to fix permissions on the /data volume.
  # initContainers:
  #   - name: fix-permissions
  #     image: docker.io/library/busybox
  #     command:
  #       - sh
  #       - -c
  #       - |
  #         chown -R 1000:1000 /data
  #     volumeMounts:
  #       - name: data
  #         mountPath: /data
  #     securityContext:
  #       capabilities:
  #         add:
  #         - CHOWN
  #       runAsNonRoot: false
  #       runAsUser: 0
  #       seccompProfile:
  #         type: RuntimeDefault
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

initializer:
  # -- Whether to enable the initializer Job.
  # When enabled, an init container will be added to all
  # deployments that require database access.
  # The init container will wait for the initializer Job to complete.
  # Requires the service account token to be mounted.
  enabled: false
  # -- Whether to NOT deploy the initializer Job as `post-install` and `post-upgrade`
  # Helm hook. Deploying as Helm hook can create deadlock situations when `helm install`
  # and `helm upgrade` are executed with `--wait` flag. See <https://github.com/helm/helm/issues/10555>.
  # Note that without hooks, `helm upgrade` may fail due to Job fields being immutable.
  noHelmHook: false
  annotations: {}
  image: *apiServerImage
  command: []
  args: []
  resources:
    requests:
      cpu: 150m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 256Mi
  # -- Security context of the Container.
  securityContext: *hyadesSecurityContext
  extraEnv: []
  extraEnvFrom: []
  tolerations: []
  nodeSelector: {}
  waiter:
    image:
      registry: "docker.io"
      repository: bitnami/kubectl
      tag: latest
      pullPolicy: Always
    # -- Whether to create a Role with permissions to
    # wait for Job completion, and bind it to the ServiceAccount.
    createRole: true

frontend:
  # -- Whether the frontend shall be deployed.
  enabled: true
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use.
    strategy:
      type: RollingUpdate
  annotations: {}
  image:
    # -- Override common.image.registry for the API frontend.
    registry: ""
    repository: dependencytrack/hyades-frontend
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 150m
      memory: 64Mi
    limits:
      cpu: 500m
      memory: 128Mi
  # -- Security context of the Container.
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    # RO filesystems are not supported by the frontend
    readOnlyRootFilesystem: false
    seccompProfile:
      type: RuntimeDefault
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    type: ClusterIP
    nodePort: ~
    port: 8080
    annotations: {}
  apiBaseUrl: ""
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

mirrorService:
  # -- Whether the mirror service shall be deployed.
  enabled: true
  # -- Number of replicas. Should be <= 1.
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use. `Recreate` is recommended because the service
    # does not serve user-traffic, and `RollingUpdate` will cause undesired
    # Kafka consumer rebalances.
    strategy:
      type: Recreate
  annotations: {}
  image:
    # -- Override common.image.registry for the mirror service.
    registry: ""
    repository: dependencytrack/hyades-mirror-service
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  # -- Security context of the container.
  securityContext: *hyadesSecurityContext
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

notificationPublisher:
  # -- Whether the notification publisher shall be deployed.
  enabled: true
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use. `Recreate` is recommended because the service
    # does not serve user-traffic, and `RollingUpdate` will cause undesired
    # Kafka consumer rebalances.
    strategy:
      type: Recreate
  annotations: {}
  image:
    # -- Override common.image.registry for the notification publisher.
    registry: ""
    repository: dependencytrack/hyades-notification-publisher
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  # -- Security context of the container.
  securityContext: *hyadesSecurityContext
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

repoMetaAnalyzer:
  # -- Whether the repository metadata analyzer shall be deployed.
  enabled: true
  annotations: {}
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use. `Recreate` is recommended because the service
    # does not serve user-traffic, and `RollingUpdate` will cause undesired
    # Kafka consumer rebalances.
    strategy:
      type: Recreate
  image:
    # -- Override common.image.registry for the repository metadata analyzer.
    registry: ""
    repository: dependencytrack/hyades-repository-meta-analyzer
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  # -- Security context of the container.
  securityContext: *hyadesSecurityContext
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

vulnAnalyzer:
  # -- Whether the vulnerability analyzer shall be deployed.
  enabled: true
  # -- Whether to deploy the vulnerability analyzer as StatefulSet.
  # Should be enabled when the STATE_STORE_TYPE environment variable
  # is set to "rocks_db", to allow for reliable storage of application
  # state to disk. Should be used in combination with persistentVolume.enabled.
  useStatefulSet: false
  annotations: {}
  replicaCount: 1
  deployment:
    # -- The deployment strategy to use. `Recreate` is recommended because the service
    # does not serve user-traffic, and `RollingUpdate` will cause undesired
    # Kafka consumer rebalances.
    strategy:
      type: Recreate
  image:
    # -- Override common.image.registry for the vulnerability analyzer.
    registry: ""
    repository: dependencytrack/hyades-vulnerability-analyzer
    # -- Can be a tag name such as "latest", or an image digest
    # prefixed with "sha256:".
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  # -- Security context of the container.
  securityContext: *hyadesSecurityContext
  persistentVolume:
    # -- Whether to use a persistent volume to store application state.
    # Has no effect unless useStatefulSet is true. Is pointless unless
    # the STATE_STORE_TYPE environment variable is set to "rocks_db",
    # since state is kept in memory per default. A volume will be created
    # for each Pod, via volumeClaimTemplates, since state must not be shared
    # between multiple replicas.
    enabled: false
    className: ""
    size: 2Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    annotations: {}
  # -- Additional init containers to deploy. Supports templating.
  initContainers: []
  # -- Additional containers to deploy. Supports templating.
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

ingress:
  enabled: false
  annotations: {}
  hostname: "example.com"
  ingressClassName: ""
  tls: []
  #  - secretName: dt-tls
  #    hosts:
  #    - example.com

extraObjects: []
# - apiVersion: "kubernetes-client.io/v1"
#   kind: ExternalSecret
#   metadata:
#     name: tempo-secrets
#   spec:
#     backendType: aws
#     data:
#       - key: secret-access-key
#         name: awssm-secret
