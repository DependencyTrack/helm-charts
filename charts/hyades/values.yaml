---
common:
  nameOverride: ""
  fullnameOverride: ""
  image:
    registry: ghcr.io
    pullSecrets: []
  database:
    jdbcUrl: ""
    username: ""
    password: ""
  kafka:
    bootstrapServers: ""
    topicPrefix: ""
  secretKey:
    # -- Whether the chart should generate a secret key upon deployment.
    createSecret: false
    # -- Use the secret key defined in an existing secret.
    existingSecretName: ""
  serviceAccount:
    create: true
    annotations: {}
    # -- Use the name of the name of the release by default, or specify a custom name.
    name: ""
    # -- Whether the serviceAccount should mount the token.
    automount: false

apiServer:
  # -- Whether the API server shall be deployed.
  enabled: true
  replicaCount: 1
  annotations: {}
  image:
    repository: dependencytrack/hyades-apiserver
    tag: snapshot
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: "2"
      memory: 4Gi
    limits:
      cpu: "4"
      memory: 8Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    type: ClusterIP
    nodePort: ~
    annotations: {}
  serviceMonitor:
    enabled: false
    namespace: monitoring
    scrapeInternal: 15s
    scrapeTimeout: 30s
  # -- Grace period for pod termination in seconds.
  # Should always be equal to or greater than the sum of `_DRAIN_TIMEOUT` configurations to ensure graceful shutdown.
  # Refer to https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/ for details.
  terminationGracePeriodSeconds: 60
  initContainers: []
  # Use the following to fix permissions on the /data volume.
  # initContainers:
  #   - name: fix-permissions
  #     image: docker.io/library/busybox
  #     command:
  #       - sh
  #       - -c
  #       - |
  #         chown -R 1000:1000 /data
  #     volumeMounts:
  #       - name: data
  #         mountPath: /data
  #     securityContext:
  #       capabilities:
  #         add:
  #         - CHOWN
  #       runAsNonRoot: false
  #       runAsUser: 0
  #       seccompProfile:
  #         type: RuntimeDefault
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

frontend:
  # -- Whether the frontend shall be deployed.
  enabled: true
  replicaCount: 1
  annotations: {}
  image:
    repository: dependencytrack/hyades-frontend
    tag: snapshot
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 150m
      memory: 64Mi
    limits:
      cpu: 500m
      memory: 128Mi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    type: ClusterIP
    nodePort: ~
    annotations: {}
  apiBaseUrl: ""
  initContainers: []
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

mirrorService:
  # -- Whether the mirror service shall be deployed.
  enabled: true
  # -- Number of replicas. Should be <= 1.
  replicaCount: 1
  annotations: {}
  image:
    repository: dependencytrack/hyades-mirror-service
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  initContainers: []
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

notificationPublisher:
  # -- Whether the notification publisher shall be deployed.
  enabled: true
  replicaCount: 1
  annotations: {}
  image:
    repository: dependencytrack/hyades-notification-publisher
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  initContainers: []
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

repoMetaAnalyzer:
  # -- Whether the repository metadata analyzer shall be deployed.
  enabled: true
  annotations: {}
  replicaCount: 1
  image:
    repository: dependencytrack/hyades-repository-meta-analyzer
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  initContainers: []
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

vulnAnalyzer:
  # -- Whether the vulnerability analyzer shall be deployed.
  enabled: true
  annotations: {}
  replicaCount: 1
  image:
    repository: dependencytrack/hyades-vulnerability-analyzer
    tag: snapshot-native
    pullPolicy: Always
  command: []
  args: []
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 2Gi
  persistentVolume:
    enabled: false
    className: ""
    size: 2Gi
  extraEnv: []
  extraEnvFrom: []
  probes:
    liveness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
  service:
    annotations: {}
  initContainers: []
  extraContainers: []
  additionalVolumes: []
  additionalVolumeMounts: []
  tolerations: []
  nodeSelector: {}

ingress:
  enabled: false
  annotations: {}
  hostname: "example.com"
  ingressClassName: ""
  tls: []
  #  - secretName: dt-tls
  #    hosts:
  #    - example.com

extraObjects: []
# - apiVersion: "kubernetes-client.io/v1"
#   kind: ExternalSecret
#   metadata:
#     name: tempo-secrets
#   spec:
#     backendType: aws
#     data:
#       - key: secret-access-key
#         name: awssm-secret
